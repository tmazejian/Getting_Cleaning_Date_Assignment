B$getInv()
cacheSolve(B)
B <- makeCacheMatrix(A)
names(B)
B$get()
B$getInv()
cacheSolve(B)
k<-makeCacheMatrix(bigVec)
names(k)
k&get()
k$get()
k$getInv()
cacheSolve(k)
class(k0)
class(k)
makeCacheMatrix <- function(x = matrix()) {
# sets x equal to an empty matrix
inv <- NULL
# Set the inverse equal to NULL
set <- function(y){
x <<- y
# set function assigns the argument to x
inv <<- NULL
# Once the set function is called, Inverse is re-set to NULL (this is important if you redefine the matrix, x)
}
get <- function() x
# get function returns the matrix
setinv <- function(inverse) inv <<- inverse
# setInverse overrides the previous value of I and assigns the argument to Inverse (which is supposed to be the inverse of matrix x)
getinv <- function() inv
# getInverse returns the Inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
# creates a list of the functions
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
# Retrives the most recent value for the inverse
if(!is.null(inv)){
message("Hurray...Retrieving data from the cache!")
return(inv)
# If the value of Inverse is NOT null (was previously calculated), cacheSolve returns that value
}
# If the value of Inverse is NULL, then you retrive matrix x and calculate the inverse with the solve() function
message("Reading and calculating data...")
d <- x$get()
inv <- solve(d, ...)
x$setinv(inv)
# Sets Inverse to the newly calculated value
inv #Returns the new Inverse value
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
}
makeCacheMatrix <- function(x = matrix()) {
# sets x equal to an empty matrix
inv <- NULL
# Set the inverse equal to NULL
set <- function(y){
x <<- y
# set function assigns the argument to x
inv <<- NULL
# Once the set function is called, Inverse is re-set to NULL (this is important if you redefine the matrix, x)
}
get <- function() x
# get function returns the matrix
setinv <- function(inverse) inv <<- inverse
# setInverse overrides the previous value of I and assigns the argument to Inverse (which is supposed to be the inverse of matrix x)
getinv <- function() inv
# getInverse returns the Inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
# creates a list of the functions
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
# Retrives the most recent value for the inverse
if(!is.null(inv)){
message("Hurray...Retrieving data from the cache!")
return(inv)
# If the value of Inverse is NOT null (was previously calculated), cacheSolve returns that value
}
# If the value of Inverse is NULL, then you retrive matrix x and calculate the inverse with the solve() function
message("Reading and calculating data...")
d <- x$get()
inv <- solve(d, ...)
x$setinv(inv)
# Sets Inverse to the newly calculated value
inv #Returns the new Inverse value
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
# sets x equal to an empty matrix
inv <- NULL
# Set the inverse equal to NULL
set <- function(y){
x <<- y
# set function assigns the argument to x
inv <<- NULL
# Once the set function is called, Inverse is re-set to NULL (this is important if you redefine the matrix, x)
}
get <- function() x
# get function returns the matrix
setinv <- function(inverse) inv <<- inverse
# setInverse overrides the previous value of I and assigns the argument to Inverse (which is supposed to be the inverse of matrix x)
getinv <- function() inv
# getInverse returns the Inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
# creates a list of the functions
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
# Retrives the most recent value for the inverse
if(!is.null(inv)){
message("Hurray...Retrieving data from the cache!")
return(inv)
# If the value of Inverse is NOT null (was previously calculated), cacheSolve returns that value
}
# If the value of Inverse is NULL, then you retrive matrix x and calculate the inverse with the solve() function
message("Reading and calculating data...")
d <- x$get()
inv <- solve(d, ...)
x$setinv(inv)
# Sets Inverse to the newly calculated value
inv #Returns the new Inverse value
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
# Retrives the most recent value for the inverse
if(!is.null(inv)){
message("Hurray...Retrieving data from the cache!")
return(inv)
# If the value of Inverse is NOT null (was previously calculated), cacheSolve returns that value
}
# If the value of Inverse is NULL, then you retrive matrix x and calculate the inverse with the solve() function
message("Reading and calculating data...")
d <- x$get()
inv <- solve(d, ...)
x$setinv(inv)
# Sets Inverse to the newly calculated value
inv #Returns the new Inverse value
}
cacheSolve(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
# sets x equal to an empty matrix
inv <- NULL
# Initialize the inverse equal to NULL. inv will be our 'inverse' and it's reset to NULL every time makeCacheMatrix is called
set <- function(y){
x <<- y
# set function assigns the argument to x
inv <<- NULL
# Once the set function is called, inv will be re-initialized to NULL
}
get <- function() x
# get function returns the matrix
setinv <- function(inverse) inv <<- inverse
# setinv rewrites the value of inv passes as an argument to inverse
getinv <- function() inv
# getinv returns the inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
# list will create a list of the functions
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Function will return a matrix that is the inverse of 'x'
inv <- x$getinv()
# Retrieves the value of the inverse
if(!is.null(inv)){
message("Cache hit...Retrieving data from the cache!!!")
return(inv)
# If the value of inv is NOT null then cacheSolve returns that value and displays a message
}
# If the value of inv is NULL, then retrive matrix x and calculate the inverse with the solve() function
message("No cache hit. Reading and calculating the inverse...")
d <- x$get()
inv <- solve(d, ...)
x$setinv(inv)
# set inv to the new value
inv #Return the value of inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
# Retrives the most recent value for the inverse
if(!is.null(inv)){
message("Hurray...Retrieving data from the cache!")
return(inv)
# If the value of Inverse is NOT null (was previously calculated), cacheSolve returns that value
}
# If the value of Inverse is NULL, then you retrive matrix x and calculate the inverse with the solve() function
message("Reading and calculating data...")
d <- x$get()
inv <- solve(d, ...)
x$setinv(inv)
# Sets Inverse to the newly calculated value
inv #Returns the new Inverse value
}
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
# sets x equal to an empty matrix
inv <- NULL
# Initialize the inverse equal to NULL. inv will be our 'inverse' and it's reset to NULL every time makeCacheMatrix is called
set <- function(y){
x <<- y
# set function assigns the argument to x
inv <<- NULL
# Once the set function is called, inv will be re-initialized to NULL
}
get <- function() x
# get function returns the matrix
setinv <- function(inverse) inv <<- inverse
# setinv rewrites the value of inv passes as an argument to inverse
getinv <- function() inv
# getinv returns the inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
# list will create a list of the functions
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Function will return a matrix that is the inverse of 'x'
inv <- x$getinv()
# Retrieves the value of the inverse
if(!is.null(inv)){
message("Cache hit...Retrieving data from the cache!!!")
return(inv)
# If the value of inv is NOT null then cacheSolve returns that value and displays a message
}
# If the value of inv is NULL, then retrive matrix x and calculate the inverse with the solve() function
message("No cache hit. Reading and calculating the inverse...")
d <- x$get()
inv <- solve(d, ...)
x$setinv(inv)
# set inv to the new value
inv #Return the value of inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library("rJava", lib.loc="~/R/win-library/3.1")
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
install.packages("mysql")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
library(httr);
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
con = url("http://www.mts.am")
htmlCode = readLines(con)
close(con)
htmlCode
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr);
oauth_endpoints("github");
library(httr);
oauth_endpoints("github");
myapp <- oauth_app("github", "ClientID", "ClientSecret");
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "b46e330f33d7f5fe4ca4", "215116502f20a14aceb0815dc5fbf3f4a90e778a");
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr);
oauth_endpoints("github");
myapp <- oauth_app("github", "b46e330f33d7f5fe4ca4", "215116502f20a14aceb0815dc5fbf3f4a90e778a");
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token));
stop_for_status(req);
content(req);
# curl -u Access Token:x-oauth-basic "https://api.github.com/users/jtleek/repos"
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"));
library(httr);
oauth_endpoints("github");
myapp <- oauth_app("github", "b46e330f33d7f5fe4ca4", "215116502f20a14aceb0815dc5fbf3f4a90e778a");
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp);
github <- oauth_endpoint(NULL, "authorize", "access_token", base_url = "https://github.com/login/oauth");
myapp <- oauth_app("github", "b46e330f33d7f5fe4ca4", "215116502f20a14aceb0815dc5fbf3f4a90e778a");
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp);
## Getting and Cleaning Data Assignment
require("data.table")
require("reshape2")
# Loading the activity labels from local directory
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Loading the data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extracting the mean and standard deviation
extract_features <- grepl("mean|std", features)
# Loading X_test & y_test data
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
# Extracting the mean and standard deviation
X_test = X_test[,extract_features]
# Loading activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Binding test data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Loading X_train & y_train
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extracting the mean and standard deviation
X_train = X_train[,extract_features]
# Loading activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Binding train data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merging test and train data
data = rbind(test_data, train_data)
id_labels = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
# Applying mean function to dataset
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./tidy_data.txt", row.name=FALSE)
## Getting and Cleaning Data Assignment
require("data.table")
require("reshape2")
# Loading the activity labels from local directory
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Loading the data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extracting the mean and standard deviation
extract_features <- grepl("mean|std", features)
# Loading X_test & y_test data
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
# Extracting the mean and standard deviation
X_test = X_test[,extract_features]
# Loading activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Binding test data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Loading X_train & y_train
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extracting the mean and standard deviation
X_train = X_train[,extract_features]
# Loading activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Binding train data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merging test and train data
data = rbind(test_data, train_data)
id_labels = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
# Applying mean function to dataset
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./tidy_data.txt", row.name=FALSE)
setwd("~/Projects/Analytics/Getting Data/Assignment1/Getting_Cleaning_Date_Assignment")
## Getting and Cleaning Data Assignment
require("data.table")
require("reshape2")
# Loading the activity labels from local directory
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")[,2]
# Loading the data column names
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
# Extracting the mean and standard deviation
extract_features <- grepl("mean|std", features)
# Loading X_test & y_test data
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
names(X_test) = features
# Extracting the mean and standard deviation
X_test = X_test[,extract_features]
# Loading activity labels
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# Binding test data
test_data <- cbind(as.data.table(subject_test), y_test, X_test)
# Loading X_train & y_train
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
names(X_train) = features
# Extracting the mean and standard deviation
X_train = X_train[,extract_features]
# Loading activity data
y_train[,2] = activity_labels[y_train[,1]]
names(y_train) = c("Activity_ID", "Activity_Label")
names(subject_train) = "subject"
# Binding train data
train_data <- cbind(as.data.table(subject_train), y_train, X_train)
# Merging test and train data
data = rbind(test_data, train_data)
id_labels = c("subject", "Activity_ID", "Activity_Label")
data_labels = setdiff(colnames(data), id_labels)
melt_data = melt(data, id = id_labels, measure.vars = data_labels)
# Applying mean function to dataset
tidy_data   = dcast(melt_data, subject + Activity_Label ~ variable, mean)
write.table(tidy_data, file = "./tidy_data.txt", row.name=FALSE)
